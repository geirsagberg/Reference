<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Reference.Common\$(OutDir)Reference.Common.dll" #>
<#@ assembly name="$(SolutionDir)Reference.Domain\$(OutDir)Reference.Domain.dll" #>
<#@ import namespace="Reference.Domain.Utils" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#
//Find all classes implementing IEntity interface
    List<EntityReflector> classes = EntityReflector.All.ToList();
#>
//This file is generated by a T4 template.
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using Reference.Domain.Entities;
using Reference.Common.Contracts.Data;

namespace Reference.Data
{
	[System.CodeDom.Compiler.GeneratedCode("T4",null)]
    public abstract class EntityContextBase : DbContext
	{

	protected EntityContextBase() {}
	protected EntityContextBase(string name) : base(name) {}
	protected EntityContextBase(DbConnection connection) : base(connection, true) {} 
<#		
foreach (EntityReflector c in classes.OrderBy(c => c.Name))
{
    string typeName = c.FullName;
    string shortName = c.Name;
    string tableName = c.Name;
    string setName = c.SetName;
#> 
		#region <#=typeName #>
		<# if (!c.SkipTable)
{ #>    
        /// <summary>
        /// The db set for <see cref="<#=typeName #>"/>.
        /// </summary>
        public virtual DbSet<<#=shortName #>> <#=setName #> => Set<<#=shortName #>>();
<# } #>

        /// <summary>
        /// Maps the type <see cref="<#=typeName #>"/> to the table defined by <seealso cref="TableAttribute.Name"/>.
        /// </summary>
		protected virtual void Map<#=shortName #>(EntityTypeConfiguration<<#=shortName #>> config){
			config.ToTable("<#=tableName #>");
<#if (c.HasVersion)
{ #>
			config.Property(v=>v.Version).IsConcurrencyToken().IsRowVersion(); 
<# } #>
<#if (c.HasId)
{ #>
			config.HasKey(e=>e.Id); 
<# } #>
		}

		#endregion
<# } #>

        /// <summary>
        /// Maps all entity classes to database tables.
        /// </summary>
		protected void MapTypesToTable(DbModelBuilder modelBuilder){
<#
foreach (EntityReflector c in classes)
{ #>
			Map<#=c.Name #>(modelBuilder.Entity<<#=c.Name #>>());
<# } #>
		}

		/// <summary>
		/// Helper method to fetch entity set.
		/// </summary>
		/// <typeparam name="T">Must implement <see cref="IEntity"/>.</typeparam>
		/// <returns>A db set.</returns>
		protected virtual DbSet<T> GetSet<T>() where T : class, IEntity
		{
			return Set<T>();
		}
	}
}
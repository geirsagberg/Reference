using System;
using System.Collections.Generic;
using System.Linq;

namespace Reference.Common.Extensions
{
    public static class EnumerableExtensions
    {
        public static bool In<T>(this T item, IEnumerable<T> enumerable)
        {
            return enumerable.Contains(item);
        }

        public static bool NotIn<T>(this T item, IEnumerable<T> enumerable)
        {
            return !enumerable.Contains(item);
        }

        public static bool In<T>(this T item, params T[] enumerable)
        {
            return enumerable.Contains(item);
        }

        public static bool NotIn<T>(this T item, params T[] enumerable)
        {
            return !enumerable.Contains(item);
        }
        
        public static string ToJoinedString<T>(this IEnumerable<T> enumerable, string separator)
        {
            return string.Join(separator, enumerable.Select(e => e.ToString()));
        }

        /// <summary>
        ///     Perform the given action <see cref="count" /> number of times.
        /// </summary>
        public static void Times(this int count, Action action)
        {
            for (var i = 0; i < count; i++) {
                action();
            }
        }

        /// <summary>
        ///     Returns an array with the given number of elements generated by <see cref="generator" />.
        /// </summary>
        public static T[] Elements<T>(this int count, Func<T> generator)
        {
            var array = new T[count];
            for (var i = 0; i < count; i++) {
                array[i] = generator();
            }
            return array;
        }

        /// <summary>
        ///     Returns an array with the given number of elements generated by <see cref="generatorWithIndex" />.
        /// </summary>
        public static T[] Elements<T>(this int count, Func<int, T> generatorWithIndex)
        {
            var array = new T[count];
            for (var i = 0; i < count; i++) {
                array[i] = generatorWithIndex(i);
            }
            return array;
        }

        public static bool IsNullOrEmpty<T>(this IEnumerable<T> enumerable)
        {
            return enumerable == null || !enumerable.Any();
        }
    }
}